Preparation
List of Commands:
$ sudo apt-get install python mongodb python-pip python-sqlalchemy python-bson python-dpkt python-jinja2 python-magic python-pymongo python-gridfs python-libvirt python-bottle python-pefile python-chardet qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils tcpdump libtool automake ssdeep libfuzzy-dev git
$ sudo pip install cybox==2.0.1.4
$ sudo pip install maec==4.0.1.0
$ sudo pip install XenAPI
$ sudo setcap cap_net_raw,cap_net_admin=eip /usr/sbin/tcpdump
$ getcap /usr/sbin/tcpdump
/usr/sbin/tcpdump = cap_net_admin,cap_net_raw+eip

VirtualBox
sudo gedit /etc/apt/sources.list
deb http://download.virtualbox.org/virtualbox/debian trusty contrib
wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add -
sudo apt-get update
sudo apt-get install virtualbox-4.3
sudo apt-get install dkms

diStorm3
wget http://ftp.de.debian.org/debian/pool/main/d/distorm3/distorm3_3.0.orig.tar.gz
tar xzvf distorm3_3.0.orig.tar.gz
cd distorm3-3.0/
python setup.py build
python setup.py install

YARA
tar -xvzf 2.1.0.tar.gz
cd yara-2.1.0
chmod a+x build.sh
./build.sh
sudo make install
cd yara-python
sudo python setup.py install

pydeep
unzip pydeep-master.zip
cd pydeep-master
sudo python setup.py install

Volatility
unzip volatility-2.4.zip
cd volatility-2.4
sudo python setup.py install


Configuration
To use Volatility you have to follow two steps:
processing.conf
[memory]
enabled = yes

cuckoo.conf
memory_dump = on

virtualbox.conf
machines = WinXPSP2x86
label = WinXPSP2x86
ip = 192.168.56.101

Exclude processes which are running prior to malware anlaysis
memory.conf
[mask]
enabled = yes
pid_generic = 1, 2, 3, 4, 5 etc.

Enabling additional reports:
reporting.conf


Preparing the Guest
Install the VM (WinXPSP2x86) as normal.
Install Python from: https://www.python.org/ftp/python/2.7.8/python-2.7.8.msi
	Configure Python on guest: Start -> Control Panel -> Performance and Maintenance -> System -> Advanced -> Environment Variables -> System Variables -> Path -> Edit -> *Append ;C:\Python27 to the string* -> *OK everything and exit*
	Type python --version in CMD to confirm
Install relevant additional software such as adbode software and office suites.
Turn both 'Windows Firewall' and 'Automatic Update' OFF from the 'Control Panel'.
Configure host-only network from VirtualBox
	File -> Preferences -> Network- > + Sign
Disable DHCP
	File -> Preferences -> Network- > Edit -> DHCP Server -> 'uncheck' Enable Server
Note: the IP address assigned above will not be visibale in the host until the guest OS is started

Host-Only networking layout with proper forwarding and filtering configuration done with iptables on the Host:
sudo iptables -A FORWARD -o eth0 -i vboxnet0 -s 192.168.56.0/24 -m conntrack --ctstate NEW -j ACCEPT
sudo iptables -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
sudo iptables -A POSTROUTING -t nat -j MASQUERADE
sudo sysctl -w net.ipv4.ip_forward=1


Installing the Agent
From release 0.4 Cuckoo adopts a custom agent that runs inside the Guest and that handles the communication and the exchange of data with the Host. This agent is designed to be cross-platform, therefore you should be able to use it on Windows as well as on Linux and OS X. In order to make Cuckoo work properly, you’ll have to install and start this agent.
On Windows simply launching the script will also spawn a Python window, if you want to hide it you can rename the file from agent.py to agent.pyw which will prevent the window from spawning.
To start the agent, we need to copy agent/agent.py to the guest VM and run it, which will start the XMLRPC server listening for incoming connections on port 8000
Since we want to start agent.py automatically at startup, we can add the “HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\Agent” registry key with a value “C:\agent.py”
reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /t Reg_Sz /v Agent /d "C:\agent.py"

Set IP to static : 192.168.56.101
Put Cuckoo Agent (agent.py) in Startup Folder
Set DNS Server & Default Gateway to 192.168.1.1

Once happy with configuration, snapshot the VM whilst it is running.
Shut the machine down.
Open virtualbox.conf and reference the VM snapshot in the file: snapshot = snapshot_name


Starting Cuckoo
Open one terminal and specify the file for analysis: ~/cuckoo/utils$ python submit.py /path/to/exe/file.exe
Open second terminal to start cuckoo: ~/cuckoo$ python cuckoo.py

Sit back and watch the analysis unfold... :)


Note that Cuckoo checks for updates on a remote API located at api.cuckoosandbox.org. You can avoid this by disabling the version_check option in the configuration file - cuckoo.conf.

Now Cuckoo is ready to run and it’s waiting for submissions.
cuckoo.py accepts some command line options as shown by the help:
usage: cuckoo.py [-h] [-q] [-d] [-v] [-a] [-t] [-m MAX_ANALYSIS_COUNT]
                 [--clean]
optional arguments:
  -h, --help            show this help message and exit
  -q, --quiet           Display only error messages
  -d, --debug           Display debug messages
  -v, --version         show program's version number and exit
  -a, --artwork         Show artwork
  -t, --test            Test startup
  -m MAX_ANALYSIS_COUNT, --max-analysis-count MAX_ANALYSIS_COUNT
                        Maximum number of analyses
  --clean               Remove all tasks and samples and their associated data
Most importantly --debug and --quiet respectively increase and decrease the logging verbosity.

For more information: http://docs.cuckoosandbox.org/en/latest/introduction/
https://itandsecuritystuffs.wordpress.com/2014/03/14/install-cuckoobox-for-malware-and-virus-analysis/
https://www.proteansec.com/linux/installing-using-cuckoo-malware-analysis-sandbox/
